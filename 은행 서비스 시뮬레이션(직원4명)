#include <stdio.h>
#include <stdlib.h>

#define MAX_QUEUE_SIZE 5

typedef struct {
	int id;
	int arrival_time;
	int service_time;
} element;
typedef struct {
	element data[MAX_QUEUE_SIZE];
	int front, rear;
} QueueType;

void error(char *message) {
	fprintf(stderr, "%s\n", message);
	exit(1);
}

void init_queue(QueueType *q) {
	q->front = q->rear =0;
}

int is_empty(QueueType *q) {
	return (q->front == q->rear);
}

int is_full(QueueType *q) {
	return ((q->rear +1) % MAX_QUEUE_SIZE == q->front);
}

void queue_print(QueueType *q) {
	printf("QUEUE(front=%d rear=%d)= ", q->front, q->rear);
	if(!is_empty(q)) {
		int i = q->front;
		do {
			i = (i+1) % (MAX_QUEUE_SIZE);
			printf("%d | ", q->data[i]);
			if( i== q->rear) break;
		} while (i != q->front);
	}
	printf("\n");
}

void enqueue(QueueType *q, element item) {
	if (is_full(q)) error("큐가 포화상태입니다.");
	q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;
	q->data[q->rear] = item;
}

element dequeue(QueueType *q) {
	if (is_empty(q)) error("큐가 공백상태입니다.");
	q->front = (q->front +1) % MAX_QUEUE_SIZE;
	return q->data[q->front];
}

element peek(QueueType *q) {
	if(is_empty(q)) error("큐가 공백상태입니다.");
	return q->data[(q->front + 1) % MAX_QUEUE_SIZE];
}

int main(void) 
{
	int Emp[4][3]={0,0,0,0}; 
	int i;
	
	int minutes = 60;
	int total_wait = 0;
	int total_customers = 0;
	int service_time = 0;
	int service_customer; 
	int clock;
	QueueType queue;
	init_queue(&queue);
	
	srand(time(NULL));
	for (clock = 0; clock < minutes; clock++) {
		printf("현재시각=%d\n", clock);
		if((rand()%10) <3) { //업무 들어옴 
			element customer;
			customer.id = total_customers++;
			customer.arrival_time = clock;
			customer.service_time = rand() % 3+1; //1~3분 처리 
			enqueue(&queue, customer);
			printf("고객 %d이 %d분에 들어옵니다. 업무처리시간 = %d분\n",
				customer.id, customer.arrival_time, customer.service_time);
		}
		
		i=0;
		while( i<4 ) {	
			if (Emp[i][2] > 0 ) {
				printf("%d 직원이 고객 %d 업무 처리중입니다. \n",i+1 , Emp[i][1]);
				Emp[i][2]--;			
			}
			else {
				if( !is_empty(&queue)) {
					if(Emp[i][2]==0) {
						element customer = dequeue(&queue);
						Emp[i][0] = customer.arrival_time;
						Emp[i][1] = customer.id;
						Emp[i][2] = customer.service_time;
						printf("%d 직원이 고객 %d이 %d분에 업무를 시작합니다. 대기시간은 %d분이었습니다. \n",
							i+1, Emp[i][1], clock, clock-Emp[i][0]);
						total_wait += clock - Emp[i][0];
					}
				}
			}
			i++;
		}
		printf("\n\n");  
	}
	printf("전체 대기 시간 = %d분 \n", total_wait);
	return 0;
}
